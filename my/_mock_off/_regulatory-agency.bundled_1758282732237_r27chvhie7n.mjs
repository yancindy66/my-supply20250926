// mock/regulatory-agency.js
var agencies = [
  { id: 1, name: "\u56FD\u5BB6\u76D1\u7BA1\u5C40", contact: "\u738B\u5C40", phone: "010-88886666", address: "\u5317\u4EAC\u5E02\u4E1C\u57CE\u533A" },
  { id: 2, name: "\u7701\u7EA7\u76D1\u7BA1\u5C40", contact: "\u674E\u5904", phone: "021-66668888", address: "\u4E0A\u6D77\u5E02\u9EC4\u6D66\u533A" }
];
var regulatory_agency_default = [
  {
    url: "/api/regulatory-agency/list",
    method: "get",
    response: ({ query }) => {
      const keyword = (query?.keyword || "").toString().trim().toLowerCase();
      const page = parseInt(query?.page || "1", 10) || 1;
      const pageSize = parseInt(query?.pageSize || "10", 10) || 10;
      const sortBy = (query?.sortBy || "").toString();
      const sortOrder = (query?.sortOrder || "asc").toString().toLowerCase() === "desc" ? "desc" : "asc";
      const filtered = keyword ? agencies.filter((a) => [a.name, a.contact, a.phone, a.address].some((v) => String(v || "").toLowerCase().includes(keyword))) : agencies;
      const sorted = sortBy ? [...filtered].sort((a, b) => {
        const av = a[sortBy];
        const bv = b[sortBy];
        const as = String(av ?? "").toLowerCase();
        const bs = String(bv ?? "").toLowerCase();
        if (as === bs) return 0;
        return sortOrder === "asc" ? as > bs ? 1 : -1 : as < bs ? 1 : -1;
      }) : filtered;
      const total = sorted.length;
      const start = (page - 1) * pageSize;
      const list = sorted.slice(start, start + pageSize);
      return { code: 0, data: { list, total, page, pageSize } };
    }
  },
  {
    url: "/api/regulatory-agency/create",
    method: "post",
    response: ({ body }) => {
      const id = Math.max(0, ...agencies.map((x) => x.id)) + 1;
      const item = { id, ...body };
      agencies.push(item);
      return { code: 0, data: item, msg: "\u521B\u5EFA\u6210\u529F" };
    }
  },
  {
    url: "/api/regulatory-agency/update",
    method: "post",
    response: ({ body }) => {
      const idx = agencies.findIndex((x) => x.id == body.id);
      if (idx === -1) return { code: 1, msg: "\u672A\u627E\u5230" };
      agencies[idx] = { ...agencies[idx], ...body };
      return { code: 0, data: agencies[idx], msg: "\u66F4\u65B0\u6210\u529F" };
    }
  },
  {
    url: "/api/regulatory-agency/delete",
    method: "post",
    response: ({ body }) => {
      agencies = agencies.filter((x) => x.id != body.id);
      return { code: 0, msg: "\u5220\u9664\u6210\u529F" };
    }
  },
  {
    url: "/api/regulatory-agency/export",
    method: "get",
    rawResponse: async (req, res) => {
      const { URL } = await import("url");
      const u = new URL(req.url, "http://localhost");
      const keyword = (u.searchParams.get("keyword") || "").toString().trim().toLowerCase();
      const sortBy = (u.searchParams.get("sortBy") || "").toString();
      const sortOrder = (u.searchParams.get("sortOrder") || "asc").toString().toLowerCase() === "desc" ? "desc" : "asc";
      const filtered = keyword ? agencies.filter((a) => [a.name, a.contact, a.phone, a.address].some((v) => String(v || "").toLowerCase().includes(keyword))) : agencies;
      const sorted = sortBy ? [...filtered].sort((a, b) => {
        const as = String(a[sortBy] ?? "").toLowerCase();
        const bs = String(b[sortBy] ?? "").toLowerCase();
        if (as === bs) return 0;
        return sortOrder === "asc" ? as > bs ? 1 : -1 : as < bs ? 1 : -1;
      }) : filtered;
      const header = ["\u673A\u6784\u540D\u79F0", "\u8054\u7CFB\u4EBA", "\u7535\u8BDD", "\u5730\u5740"];
      const lines = [header.join(",")].concat(sorted.map((r) => [r.name, r.contact, r.phone, r.address].map((v) => String(v ?? "").replace(/"/g, '""')).map((s) => /[",\n]/.test(s) ? '"' + s + '"' : s).join(",")));
      const csv = "\uFEFF" + lines.join("\n");
      const asciiName = `regulatory-agencies-${Date.now()}.csv`;
      res.statusCode = 200;
      res.setHeader("Content-Type", "text/csv; charset=utf-8");
      res.setHeader("Content-Disposition", `attachment; filename="${asciiName}"`);
      res.end(csv);
    }
  }
];
export {
  regulatory_agency_default as default
};
//# sourceMappingURL=data:application/json;base64,
