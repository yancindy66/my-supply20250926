// mock/supplier-brand.js
import fs from "fs";
import path from "path";
var dataDir = path.resolve(process.cwd(), "mock", "data");
var file = path.resolve(dataDir, "supplier-brand.json");
var stdFile = path.resolve(dataDir, "platform-standard.json");
function ensure() {
  try {
    if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });
  } catch {
  }
}
function load() {
  try {
    if (fs.existsSync(file)) return JSON.parse(fs.readFileSync(file, "utf8"));
  } catch {
  }
  return [];
}
function save(data) {
  try {
    ensure();
    fs.writeFileSync(file, JSON.stringify(data, null, 2), "utf8");
  } catch {
  }
}
function loadStandards() {
  try {
    if (fs.existsSync(stdFile)) return JSON.parse(fs.readFileSync(stdFile, "utf8"));
  } catch {
  }
  return [];
}
var brands = load();
var standards = loadStandards();
function nextId() {
  return Math.max(0, ...brands.map((b) => b.id || 0)) + 1;
}
function dateStr() {
  const d = /* @__PURE__ */ new Date();
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, "0");
  const day = String(d.getDate()).padStart(2, "0");
  return `${y}${m}${day}`;
}
function codeOf(ct) {
  if (ct === "\u68C9\u82B1") return "CF";
  if (ct === "\u7EA2\u67A3") return "CJ";
  return "OT";
}
function genPlatformBrandCode(std) {
  const date = dateStr();
  const prefix = codeOf(std.commodity_type);
  return `${prefix}${date}`;
}
function genProductIdByStd(std) {
  const d = /* @__PURE__ */ new Date();
  const yy = String(d.getFullYear()).slice(-2);
  const mm = String(d.getMonth() + 1).padStart(2, "0");
  const prefix = codeOf(std.commodity_type);
  return `${prefix}${yy}${mm}`;
}
function mockParseReport(name, base64, std) {
  const pass = !String(name || "").toLowerCase().includes("fail");
  const ct = std?.commodity_type || "\u68C9\u82B1";
  if (ct === "\u7EA2\u67A3") {
    const measured2 = { "\u7CD6\u5EA6_Brix_%": 72, "\u542B\u6C34\u7387_%": 22, "\u6BCF\u516C\u65A4\u9897\u7C92\u6570": 260, "\u9709\u53D8\u7387_%": 0.5, "\u7834\u635F\u7387_%": 2.5 };
    const profile2 = {
      processor_name: "\u793A\u4F8B\u52A0\u5DE5\u5382",
      processor_address: "\u65B0\u7586\u5E93\u5C14\u52D2\u7ECF\u6D4E\u533A88\u53F7",
      contact_person: "\u674E\u56DB",
      date_brix: 72,
      date_moisture_percent: 22,
      date_pieces_per_kg: 260,
      date_mildew_percent: 0.5,
      date_breakage_percent: 2.5
    };
    return { pass, measured: measured2, profile: profile2 };
  }
  const measured = { "\u7EA4\u7EF4\u957F\u5EA6_mm": 29, "\u9A6C\u514B\u9686\u7B49\u7EA7": "B", "\u5F3A\u5EA6_cN/tex": 28.8, "\u957F\u5EA6\u6574\u9F50\u5EA6_min": 83 };
  const profile = {
    processor_name: "\u793A\u4F8B\u52A0\u5DE5\u5382",
    processor_address: "\u65B0\u7586\u4E4C\u9C81\u6728\u9F50\u9AD8\u65B0\u533A88\u53F7",
    contact_person: "\u5F20\u4E09",
    fiber_length: measured["\u7EA4\u7EF4\u957F\u5EA6_mm"],
    break_strength: measured["\u5F3A\u5EA6_cN/tex"],
    micronaire: 4.1,
    uniformity_index: measured["\u957F\u5EA6\u6574\u9F50\u5EA6_min"],
    no_foreign_fiber: true,
    color_grade_pct: { "11": 60, "21": 30, "31": 10 },
    ginning_quality_pct: { P1: 40, P2: 50, P3: 10 }
  };
  return { pass, measured, profile };
}
function validateAgainstSpec(std, measured) {
  const spec = std.specifications || {};
  for (const k of Object.keys(measured || {})) {
    const v = measured[k];
    const s = spec[k];
    if (s == null) continue;
    if (Array.isArray(s) && typeof s[0] === "number" && typeof s[1] === "number") {
      if (!(v >= s[0] && v <= s[1])) return false;
    } else if (Array.isArray(s)) {
      if (!s.includes(v)) return false;
    } else if (typeof s === "number") {
      if (!(v >= s)) return false;
    }
  }
  return true;
}
var supplier_brand_default = [
  // 列表/查询（支持按 code 精确查询）
  {
    url: "/api/supplier_brand",
    method: "get",
    response: ({ query }) => {
      const code = String(query?.code || "").trim();
      const page = parseInt(query?.page || "1", 10) || 1;
      const pageSize = parseInt(query?.pageSize || "20", 10) || 20;
      let list = brands;
      if (code) list = brands.filter((b) => b.platform_brand_code === code);
      const total = list.length;
      const pageList = list.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);
      return { code: 0, data: { list: pageList, total, page, pageSize } };
    }
  },
  // 详情
  {
    url: "/api/supplier_brand/:id",
    method: "get",
    response: ({ params }) => {
      const b = brands.find((x) => String(x.id) === String(params?.id));
      if (!b) return { code: 1, msg: "\u672A\u627E\u5230" };
      return { code: 0, data: b };
    }
  },
  // 解析质检报告并与平台标准进行比对（预审）
  {
    url: "/api/supplier_brand/parse_report",
    method: "post",
    response: ({ body }) => {
      const platform_standard_id = Number(body?.platform_standard_id || 0);
      const std = standards.find((s) => Number(s.id) === platform_standard_id);
      if (!std) return { code: 1, msg: "\u5E73\u53F0\u6807\u51C6\u4E0D\u5B58\u5728" };
      const parsed = mockParseReport(body?.quality_report_name, body?.quality_report_base64, std);
      if (!parsed.pass) return { code: 1, msg: "\u8D28\u68C0\u62A5\u544A\u8BC6\u522B\u5931\u8D25\u6216\u4E0D\u5408\u683C" };
      const spec = std.specifications || {};
      const measured = parsed.measured || {};
      const rows = Object.keys(measured).map((k) => {
        const m = measured[k];
        const s = spec[k];
        let ok = true;
        let expected = "";
        if (Array.isArray(s) && typeof s[0] === "number" && typeof s[1] === "number") {
          ok = m >= s[0] && m <= s[1];
          expected = `${s[0]} ~ ${s[1]}`;
        } else if (Array.isArray(s)) {
          ok = s.includes(m);
          expected = s.join("/");
        } else if (typeof s === "number") {
          ok = m >= s;
          expected = `\u2265 ${s}`;
        } else {
          expected = s == null ? "-" : String(s);
        }
        return { metric: k, expected, measured: m, ok };
      });
      const pass = rows.every((r) => r.ok);
      return { code: 0, data: { rows, pass, profile: parsed.profile } };
    }
  },
  {
    url: "/api/supplier_brand",
    method: "post",
    response: ({ body }) => {
      const brand_name = String(body?.brand_name || "").trim();
      const platform_standard_id = Number(body?.platform_standard_id || 0);
      const supplier_id = Number(body?.supplier_id || 0) || 1;
      const custom_premium = Number(body?.custom_premium || 0) || 0;
      if (!brand_name || !platform_standard_id) return { code: 1, msg: "\u53C2\u6570\u4E0D\u5B8C\u6574" };
      if (brands.some((b) => b.supplier_id === supplier_id && b.brand_name === brand_name)) return { code: 1, msg: "\u8BE5\u5BA2\u6237\u54C1\u724C\u540D\u5DF2\u5B58\u5728" };
      const std = standards.find((s) => Number(s.id) === platform_standard_id);
      if (!std) return { code: 1, msg: "\u5E73\u53F0\u6807\u51C6\u4E0D\u5B58\u5728" };
      const parsed = mockParseReport(body?.quality_report_name, body?.quality_report_base64, std);
      if (!parsed.pass) return { code: 1, msg: "\u8D28\u68C0\u62A5\u544A\u8BC6\u522B\u5931\u8D25\u6216\u4E0D\u5408\u683C" };
      const ok = validateAgainstSpec(std, parsed.measured);
      if (!ok) return { code: 1, msg: "\u8D28\u68C0\u62A5\u544A\u6570\u636E\u4E0E\u6240\u9009\u7B49\u7EA7\u4E0D\u7B26" };
      const platform_brand_code = genPlatformBrandCode(std);
      const item = { id: nextId(), supplier_id, brand_name, platform_standard_id, custom_premium, platform_brand_code, status: "\u5DF2\u4E0A\u67B6", quality_report_url: "", _date: dateStr() };
      brands.push(item);
      save(brands);
      try {
        const pfile = path.resolve(dataDir, "products.json");
        const plist = fs.existsSync(pfile) ? JSON.parse(fs.readFileSync(pfile, "utf8")) : [];
        const nowId = Math.max(0, ...plist.map((p) => p.id || 0)) + 1;
        const product_id = genProductIdByStd(std);
        const baseProduct = {
          id: nowId,
          product_id,
          species: std.commodity_type || "\u68C9\u82B1",
          product_name: brand_name,
          short_code: "",
          production_year: (/* @__PURE__ */ new Date()).getFullYear(),
          package_spec: "200kg/\u5305",
          origin_area: "\u65B0\u7586",
          status: "\u4E0A\u67B6",
          platform_standard_id,
          platform_standard_grade_name: std.grade_name,
          platform_brand_code,
          platform_base_premium: std.base_premium
        };
        plist.push(baseProduct);
        fs.writeFileSync(pfile, JSON.stringify(plist, null, 2), "utf8");
        return { code: 0, data: { brand_name, platform_brand_code, status: item.status, product_db_id: nowId, product_id } };
      } catch {
        return { code: 0, data: { brand_name, platform_brand_code, status: item.status } };
      }
    }
  },
  // 更新
  {
    url: "/api/supplier_brand/:id",
    method: "put",
    response: ({ params, body }) => {
      const idx = brands.findIndex((b) => String(b.id) === String(params?.id));
      if (idx === -1) return { code: 1, msg: "\u672A\u627E\u5230" };
      const updates = {};
      if (body?.brand_name != null) updates.brand_name = String(body.brand_name).trim();
      if (body?.custom_premium != null) updates.custom_premium = Number(body.custom_premium) || 0;
      brands[idx] = { ...brands[idx], ...updates };
      save(brands);
      return { code: 0, data: brands[idx] };
    }
  },
  // 删除
  {
    url: "/api/supplier_brand/:id",
    method: "delete",
    response: ({ params }) => {
      const before = brands.length;
      brands = brands.filter((b) => String(b.id) !== String(params?.id));
      save(brands);
      return { code: 0, data: { removed: before - brands.length } };
    }
  }
];
export {
  supplier_brand_default as default
};
//# sourceMappingURL=data:application/json;base64,
